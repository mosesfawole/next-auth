import Head from "next/head";
import styles from "../styles/Home.module.css";
import { auth } from "../firebase.config";
import { useEffect, useState } from "react";

import {
  createUserWithEmailAndPassword,
  GoogleAuthProvider,
  GithubAuthProvider,
  signInWithPopup,
} from "firebase/auth";
import { useRouter } from "next/router";
import Loader from "./Loader";
const Register = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmation, setConfirmation] = useState("");
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();

  const googleProvider = new GoogleAuthProvider();
  const githubProvider = new GithubAuthProvider();

  const signUp = async (e) => {
    e.preventDefault();
    if (email === "" || password === "" || confirmation === "") {
      setError("Please fill out all fields");
      return;
    }
    if (password.length < 6) {
      setError("Password must be at least 6 characters");
      return;
    }
    if (password !== confirmation) {
      setError("Passwords do not match");
      return;
    }
    try {
      return await createUserWithEmailAndPassword(auth, email, password).then(
        () => {
          setIsLoading(!isLoading);
          router.push("/");
        }
      );
    } catch (error) {
      const unsubscribe = auth.onAuthStateChanged((user) => {
        if (user.email) {
          setError("user already exists");
        }
        return unsubscribe;
      });
      setError(error.message);
    }
  };

  const googleSignUp = () => {
    signInWithPopup(auth, googleProvider)
      .then((response) => {
        console.log(response.user);
      })
      .catch((error) => {
        const unsubscribe = auth.onAuthStateChanged((user) => {
          if (user.email) {
            setError("user already exists");
          }
          setError(error.message);
          return unsubscribe;
        });
      });
  };
  const githubSignUp = () => {
    signInWithPopup(auth, githubProvider)
      .then(() => {
        router.push("/");
      })
      .catch((error) => {
        const unsubscribe = auth.onAuthStateChanged((user) => {
          if (user.email) {
            setError("user already exists");
          }
          setError(error.message);
          return unsubscribe;
        });
      });
  };

  useEffect(() => {}, []);

  if (isLoading) {
    return <Loader />;
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>NEXT CRUD AUTH App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      (
      <main className={styles.main}>
        <h1>Register</h1>

        <form className={styles.form} onSubmit={signUp}>
          <p className={styles.error}>{error}</p>
          <input
            className={styles.inputBox}
            placeholder="Email"
            value={email}
            type="email"
            onChange={(e) => setEmail(e.target.value)}
          />
          <input
            className={styles.inputBox}
            placeholder="Password"
            value={password}
            type="password"
            onChange={(e) => setPassword(e.target.value)}
          />
          <input
            className={styles.inputBox}
            placeholder="Password Confirmation"
            value={confirmation}
            type="password"
            onChange={(e) => setConfirmation(e.target.value)}
          />
          <button type="submit" className={styles.button}>
            Sign Up
          </button>
          <button onClick={googleSignUp} className={styles.button}>
            Sign Up with Google{" "}
            <i className="fa fa-google" aria-hidden="true"></i>{" "}
          </button>
          <button onClick={githubSignUp} className={styles.button}>
            Sign Up Github
          </button>
        </form>
      </main>
    </div>
  );
};

export default Register;
